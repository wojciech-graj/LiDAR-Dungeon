-- title:   TODO
-- author:  Wojciech Graj
-- desc:    TODO
-- site:    TODO
-- license: AGPL-3.0-only
-- version: 0.0
-- script:  lua

--- Conventions
-- VARIABLE delta: time since last frame (ms)
-- VARIABLE g_*: global variable
-- VARIABLE dir_*: normalized direction
-- FUNCTION Class:process(delta): executed every frame. May return boolean,
-- where true signifies that object should be deleted

----------------------------------------
-- utility functions -------------------
----------------------------------------

--- Get the sign of a number
-- @param x number
-- @return int
function g_math_sign(x)
   return x > 0 and 1 or x < 0 and -1 or 0
end

--- Calculate a ray-map intersection
-- Uses Digital Differential Analyzer (DDA) voxel traversal to find closest wall
-- intersection.
-- @param pos_x number
-- @param pos_y number
-- @param dir_x number
-- @param dir_y number
-- @return table
function g_ray_isect(pos_x, pos_y, dir_x, dir_y)
   local math_floor = math.floor
   local math_abs = math.abs

   local map_x = math_floor(pos_x)
   local map_y = math_floor(pos_y)
   local delta_dist_x = math_abs(1 / dir_x)
   local delta_dist_y = math_abs(1 / dir_y)

   local step_x
   local side_dist_x
   if dir_x < 0 then
      step_x = -1
      side_dist_x = (pos_x - map_x) * delta_dist_x
   else
      step_x = 1
      side_dist_x = (map_x + 1.0 - pos_x) * delta_dist_x
   end

   local step_y
   local side_dist_y
   if dir_y < 0 then
      step_y = -1
      side_dist_y = (pos_y - map_y) * delta_dist_y
   else
      step_y = 1
      side_dist_y = (map_y + 1.0 - pos_y) * delta_dist_y
   end

   -- DDA
   local side
   local iters = 0
   while iters < 128 do
      if side_dist_x < side_dist_y then
         side_dist_x = side_dist_x + delta_dist_x
         map_x = map_x + step_x
         side = 0
      else
         side_dist_y = side_dist_y + delta_dist_y
         map_y = map_y + step_y
         side = 1
      end
      iters = iters + 1
      tile_data = mget(map_x, map_y)
      if tile_data > 0 then
         break
      end
   end

   local ray_isect_tab = g_ray_isect_tab
   ray_isect_tab.side = side
   if side == 0 then
      ray_isect_tab.dist = side_dist_x - delta_dist_x
   else -- side == 1
      ray_isect_tab.dist = side_dist_y - delta_dist_y
   end

   return ray_isect_tab
end
g_ray_isect_tab = {
   dist = 0,
   side = 0,
}

----------------------------------------
-- Hitmark -----------------------------
----------------------------------------

--- Map-Ping hit indicator
Hitmark = {
   pos_x = 0,
   pos_y = 0,
   age = 0,
}
Hitmark.__index = Hitmark

function Hitmark.new(pos_x, pos_y)
   local self = setmetatable({}, Hitmark)
   self.pos_x = pos_x
   self.pos_y = pos_y
   return self
end

function Hitmark:process(delta)
   self.age = self.age + delta
   pix(self.pos_x * 8, self.pos_y * 8, 12 + self.age * 0.002)
   return self.age > 1000
end

----------------------------------------
-- Ping --------------------------------
----------------------------------------

--- Single-pixel ping used to uncover map
Ping = {
   pos_x = 0,
   pos_y = 0,
   dir_x = 0,
   dir_y = 0,
   vel = 0,
   wall_dist = 0,
   wall_side = 0,
   bounce_rem = 0,
}
Ping.__index = Ping

function Ping.new(pos_x, pos_y, angle, vel, bounce_rem)
   local self = setmetatable({}, Ping)
   self.pos_x = pos_x
   self.pos_y = pos_y
   self.dir_x = math.cos(angle)
   self.dir_y = math.sin(angle)
   self.vel = vel
   self.bounce_rem = bounce_rem
   local isect = g_ray_isect(pos_x, pos_y, self.dir_x, self.dir_y)
   self.wall_dist = isect.dist
   self.wall_side = isect.side
   return self
end

function Ping:process(delta)
   local dist = self.vel * delta
   while true do
      local min_dist = math.min(self.wall_dist, dist)
      self.wall_dist = self.wall_dist - dist
      self.pos_x = self.pos_x + self.dir_x * min_dist
      self.pos_y = self.pos_y + self.dir_y * min_dist

      if self.wall_dist > 0 then
         pix(self.pos_x * 8, self.pos_y * 8, 15 - self.bounce_rem)
         return false
      end

      table.insert(g_hitmarks, Hitmark.new(self.pos_x, self.pos_y))

      self.bounce_rem = self.bounce_rem - 1
      if self.bounce_rem <= 0 then
         return true
      end

      self.dist = -self.wall_dist
      if self.wall_side == 0 then
         self.dir_x = -self.dir_x
      else -- self.wall_side == 1
         self.dir_y = -self.dir_y
      end

      local isect = g_ray_isect(self.pos_x, self.pos_y, self.dir_x, self.dir_y)
      self.wall_dist = isect.dist
      self.wall_side = isect.side
   end
end

----------------------------------------
-- Player ------------------------------
----------------------------------------

Player = {
   pos_x = 3,
   pos_y = 3,
   angle = 0,
   ping_cooldown = 0,
}
Player.__index = Player

function Player.new()
   local self = setmetatable({}, Player)
   return self
end

function Player:ping()
   local pings = g_pings
   self.ping_cooldown = 1000
   for theta = -0.5, 0.5, 0.003 do
      table.insert(pings, Ping.new(self.pos_x, self.pos_y, self.angle + theta, .01, 2))
   end
end

--- Move the player
-- @param dist number
-- @param dir int: either 1 or -1 for forwards or backwards respectively
function Player:move(dist, dir)
   local dir_x = dir * math.cos(self.angle)
   local dir_y = dir * math.sin(self.angle)
   local isect = g_ray_isect(self.pos_x, self.pos_y, dir_x, dir_y)
   if isect.dist > 0.1 then
      local dist_min = math.min(dist, isect.dist - 0.1)
      self.pos_x = self.pos_x + dir_x * dist_min
      self.pos_y = self.pos_y + dir_y * dist_min
   end
end

function Player:rotate(theta)
   self.angle = self.angle + theta
end

function Player:process(delta)
   self.ping_cooldown = math.max(self.ping_cooldown - delta, 0)

   if btn(0) then
      self:move(0.01 * delta, 1)
   elseif btn(1) then
      self:move(0.01 * delta, -1)
   end

   if btn(2) then
      self:rotate(-0.01 * delta)
   elseif btn(3) then
      self:rotate(0.01 * delta)
   end

   if btn(4) and self.ping_cooldown == 0 then
      self:ping()
   end

   pix(self.pos_x * 8, self.pos_y * 8, 5)
end

----------------------------------------
-- main --------------------------------
----------------------------------------

function BOOT()
   g_player = Player.new()
   g_prev_time = time()
   g_pings = {}
   g_hitmarks = {}
end

function TIC()
   cls()

   local t = time()
   local delta = t - g_prev_time
   g_prev_time = t

   local player = g_player
   local pings = g_pings
   local hitmarks = g_hitmarks

   map(0, 0)

   -- process
   player:process(delta)

   for k, v in pairs(pings) do
      if v:process(delta) then
         pings[k] = nil
      end
   end

   for k, v in pairs(hitmarks) do
      if v:process(delta) then
         hitmarks[k] = nil
      end
   end
end

-- <TILES>
-- 001:1111111111111111111111111111111111111111111111111111111111111111
-- </TILES>

-- <MAP>
-- 000:101010101010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:100000000000000000000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 002:100000000000000000000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:100000000000000000000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 004:100000000000000000000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:101010101010000000000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 006:100000000000000000000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 007:100000000000000000000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 008:100000001000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 009:100000001000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 010:100000001000001000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 011:100000000000001000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 012:100000000000000000000000101010101000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 013:100000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 014:101010101010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </MAP>

-- <WAVES>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdeffedcba9876543210
-- 002:0123456789abcdef0123456789abcdef
-- </WAVES>

-- <SFX>
-- 000:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304000000000
-- </SFX>

-- <TRACKS>
-- 000:100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </TRACKS>

-- <PALETTE>
-- 000:1a1c2c5d275db13e53ef7d57ffcd75a7f07038b76425717929366f3b5dc941a6f673eff7f4f4f494b0c2566c86333c57
-- </PALETTE>
